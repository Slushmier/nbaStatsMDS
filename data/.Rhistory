print(new_vec)
names(new_vec) <- numerics
return(new_vec)
}
column_medians(flights)
input = flights
numerics <- colnames(select_if(input, is.numeric))
numerics
new_vec <- vector()
for (nm in names(numerics)) {
new_median <- median(input[nm])
append(new_vec, new_median, length(new_vec))
}
for (nm in names(numerics)) {
new_median <- median(input[nm])
print(new_median)
append(new_vec, new_median, length(new_vec))
}
names(numerics)
for (nm in names(numerics)) {
new_median <- median(input[[nm]])
print(new_median)
append(new_vec, new_median, length(new_vec))
}
print(new_vec)
for (nm in names(numerics)) {
print(nm)
new_median <- median(input[[nm]])
print(new_median)
append(new_vec, new_median, length(new_vec))
}
numerics <- colnames(select_if(input, is.numeric))
new_vec <- vector()
new_vec <- vector("list", length(numerics))
new_vec
numerics <- select_if(input, is.numeric)
new_vec <- vector("list", ncols(numerics))
new_vec <- vector("list", ncol(numerics))
new_vec
numerics <- select_if(input, is.numeric)
new_vec <- vector("list", ncol(numerics))
for (i in seq_along(new_vec)) {
new_median <- median(numerics[[i]])
new_vec[[i]] <- new_median
}
new_vec
numerics <- select_if(input, is.numeric)
new_vec <- vector("list", ncol(numerics))
for (i in seq_along(new_vec)) {
new_median <- median(numerics[[i]], na.rm = TRUE)
new_vec[[i]] <- new_median
}
new_vec
column_medians <- function(input, na.rm = TRUE) {
numerics <- select_if(input, is.numeric)
new_vec <- vector("list", ncol(numerics))
for (i in seq_along(new_vec)) {
new_median <- median(numerics[[i]], na.rm = TRUE)
new_vec[[i]] <- new_median
}
new_vec <- unlist(new_vec)
names(new_vec) <- names(numerics)
return(new_vec)
}
column_medians(flights)
column_medians(flights, na.rm = FALSE)
column_medians(flights, na.rm = FALSE)
column_medians <- function(input, na.rm = TRUE) {
numerics <- select_if(input, is.numeric)
new_vec <- vector("list", ncol(numerics))
for (i in seq_along(new_vec)) {
new_median <- median(numerics[[i]], na.rm = na.rm)
new_vec[[i]] <- new_median
}
new_vec <- unlist(new_vec)
names(new_vec) <- names(numerics)
return(new_vec)
}
column_medians(flights, na.rm = FALSE)
column_medians(flights, na.rm = TRUE)
column_medians <- function(input, na.rm = TRUE) {
numerics <- select_if(input, is.numeric)
if (!numerics) {return(NULL)}
new_vec <- vector("list", ncol(numerics))
for (i in seq_along(new_vec)) {
new_median <- median(numerics[[i]], na.rm = na.rm)
new_vec[[i]] <- new_median
}
new_vec <- unlist(new_vec)
names(new_vec) <- names(numerics)
return(new_vec)
}
column_medians(flights, na.rm = TRUE)
column_medians <- function(input, na.rm = TRUE) {
numerics <- select_if(input, is.numeric)
if (ncol(numerics) == 0) {return(NULL)}
new_vec <- vector("list", ncol(numerics))
for (i in seq_along(new_vec)) {
new_median <- median(numerics[[i]], na.rm = na.rm)
new_vec[[i]] <- new_median
}
new_vec <- unlist(new_vec)
names(new_vec) <- names(numerics)
return(new_vec)
}
column_medians(flights, na.rm = TRUE)
str(flights)
flights["carrier"]
column_medians(flights["carrier"], na.rm = TRUE)
column_medians <- function(input, na.rm = TRUE) {
numerics <- select_if(input, is.numeric)
if (ncol(numerics) == 0) {print("No numerics")
return(NULL)}
new_vec <- vector("list", ncol(numerics))
for (i in seq_along(new_vec)) {
new_median <- median(numerics[[i]], na.rm = na.rm)
new_vec[[i]] <- new_median
}
new_vec <- unlist(new_vec)
names(new_vec) <- names(numerics)
return(new_vec)
}
column_medians(flights["carrier"], na.rm = TRUE)
column_medians <- function(input, na.rm = TRUE) {
numerics <- select_if(input, is.numeric)
if (ncol(numerics) == 0) {print("No numerics passed to function")
return()}
new_vec <- vector("list", ncol(numerics))
for (i in seq_along(new_vec)) {
new_median <- median(numerics[[i]], na.rm = na.rm)
new_vec[[i]] <- new_median
}
new_vec <- unlist(new_vec)
names(new_vec) <- names(numerics)
return(new_vec)
}
column_medians(flights["carrier"], na.rm = TRUE)
column_medians <- function(input, na.rm = TRUE) {
numerics <- select_if(input, is.numeric)
if (ncol(numerics) == 0) {print("No numerics passed to function") return()}
new_vec <- vector("list", ncol(numerics))
for (i in seq_along(new_vec)) {
new_median <- median(numerics[[i]], na.rm = na.rm)
new_vec[[i]] <- new_median
}
new_vec <- unlist(new_vec)
names(new_vec) <- names(numerics)
return(new_vec)
}
column_medians <- function(input, na.rm = TRUE) {
numerics <- select_if(input, is.numeric)
if (ncol(numerics) == 0) {print("No numerics passed to function")
return()
}
new_vec <- vector("list", ncol(numerics))
for (i in seq_along(new_vec)) {
new_median <- median(numerics[[i]], na.rm = na.rm)
new_vec[[i]] <- new_median
}
new_vec <- unlist(new_vec)
names(new_vec) <- names(numerics)
return(new_vec)
}
column_medians(flights["carrier"], na.rm = TRUE)
column_medians(flights, na.rm = TRUE)
column_medians(flights)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(nycflights13)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(nycflights13)
min_med_max <- function(input){
minimum <- min(input)
median_value <- median(input)
maximum <- max(input)
v <- c(minimum, median_value, maximum)
names(v) <- c("Minimum", "Median", "Maximum")
return(v)
}
test <- min_med_max(flights$month)
test
classify_time_of_day <- function(in_tibble, column){
require("dplyr")
new_vec <- dplyr::select(in_tibble, column)
# This statement tests to see if input is numeric and if the values are
# within the flight-time range
if (max(new_vec, na.rm = TRUE) <= 2400 && min(new_vec, na.rm = TRUE) >= 0){
# Generate new column name for classified data
new_col_name <- paste(as.character(column), "_class", sep = "")
# Classify data based on time of day
new_vec_2 <- new_vec %>%
mutate(!!new_col_name := case_when(
!!sym(column) >= 500  & !!sym(column) <= 1159 ~ "Morning",
!!sym(column) >= 1200 & !!sym(column) <= 1659 ~ "Afternoon",
!!sym(column) >= 1700 & !!sym(column) <= 2059 ~ "Evening",
is.na(!!sym(column)) == TRUE                  ~ "Unknown",
TRUE                                          ~ "Night"))
return(new_vec_2)
} else {
#If input isn't numeric, doesn't further modify output
print("Not a numeric variable.")
return(new_vec)
}
### End of function
}
classified_data <- classify_time_of_day(flights, "dep_time")
head(classified_data, n = 10L)
set.seed(12345)
min_med_max <- function(input){
minimum <- min(input)
median_value <- median(input)
maximum <- max(input)
v <- c(minimum, median_value, maximum)
names(v) <- c("Minimum", "Median", "Maximum")
return(v)
}
results <- min_med_max(flights$month)
results
classify_time_of_day <- function(in_tibble, column){
require("dplyr")
new_vec <- dplyr::select(in_tibble, column)
# This statement tests to see if input is numeric and if the values are
# within the flight-time range
if (max(new_vec, na.rm = TRUE) <= 2400 && min(new_vec, na.rm = TRUE) >= 0){
# Generate new column name for classified data
new_col_name <- paste(as.character(column), "_class", sep = "")
# Classify data based on time of day
new_vec_2 <- new_vec %>%
mutate(!!new_col_name := case_when(
!!sym(column) >= 500  & !!sym(column) <= 1159 ~ "Morning",
!!sym(column) >= 1200 & !!sym(column) <= 1659 ~ "Afternoon",
!!sym(column) >= 1700 & !!sym(column) <= 2059 ~ "Evening",
is.na(!!sym(column)) == TRUE                  ~ "Unknown",
TRUE                                          ~ "Night"))
return(new_vec_2)
} else {
#If input isn't numeric, doesn't further modify output
print("Not a numeric variable.")
return(new_vec)
}
### End of function
}
classified_data <- classify_time_of_day(flights, "dep_time")
head(classified_data, n = 10L)
sample_n(classified_data, 10)
head(classified_data, n = 10L)
column_medians <- function(input, na.rm = TRUE) {
numerics <- select_if(input, is.numeric)
# Tests to make sure there are numerics to calculate
if (ncol(numerics) == 0) {print("No numerics passed to function")
return()
}
new_vec <- vector("list", ncol(numerics))
for (i in seq_along(new_vec)) {
new_median <- median(numerics[[i]], na.rm = na.rm)
new_vec[[i]] <- new_median
}
new_vec <- unlist(new_vec)
names(new_vec) <- names(numerics)
return(new_vec)
}
column_medians(flights)
column_medians(flights)[1:10]
class(column_medians(flights)[1:10])
str(column_medians(flights)[1:10])
nba <- read.csv("Seasons_Stats_NBA.csv")
setwd("C:/Users/Slushmier/OneDrive/QMSS/GR5072_Modern_Data_Structures/Homework/05_Assignment")
nba <- read.csv("Seasons_Stats_NBA.csv")
nba_0 <- nba
nba_0[is.na(nba_0)] <- 0
fact_year <- function(year = 1983) {
if (year < 1950 | year > 2017) {
year <- sample(c(1950:2017), 1)
print("Non-valid year. Random year generated.")}
output <- dplyr::filter(nba_0, Year == year)
output[sample(nrow(output), 1), c(1, 2, sample(3: ncol(output), 1))]
}
fact_year(1983)
output <- dplyr::filter(nba_0, Year == year) %>%
dplyr::filter(Age == max(Age)) %>%
dplyr::select(Year, Player, Age)
require(dplyr)
output[sample(nrow(output), 1), c(1, 2, sample(3: ncol(output), 1))]
fact_year <- function(year = 1983) {
require(dplyr)
if (year < 1950 | year > 2017) {
year <- sample(c(1950:2017), 1)
print("Non-valid year. Random year generated.")}
output <- dplyr::filter(nba_0, Year == year)
output[sample(nrow(output), 1), c(1, 2, sample(3: ncol(output), 1))]
}
fact_year(1983)
oldest_year <- function(year = 1983) {
require(dplyr)
if (year < 1950 | year > 2017) {
year <- sample(c(1950:2017), 1)
print("Non-valid year. Random year generated.")}
output <- dplyr::filter(nba_0, Year == year) %>%
dplyr::filter(Age == max(Age)) %>%
dplyr::select(Year, Player, Age)
output[sample(nrow(output), 1),]
}
oldest_year(1982)
oldest_year <- function(year = 1983) {
require(dplyr)
if (year < 1950 | year > 2017 | is.numeric(year) == FALSE) {
year <- sample(c(1950:2017), 1)
print("Non-valid year. Random year generated.")}
output <- dplyr::filter(nba_0, Year == year) %>%
dplyr::filter(Age == max(Age)) %>%
dplyr::select(Year, Player, Age)
output[sample(nrow(output), 1),]
}
oldest_year("ham")
cor_year <- function(year = 1983) {
require(dplyr, purrr)
if (year < 1950 | year > 2017) {
year <- sample(c(1950:2017), 1)
print("Non-valid year. Random year generated.")}
output <- purrr::keep(nba_0, is.numeric)
output <- dplyr::filter(nba_0, Year == year)
cor(output)
}
cor_year(1983)
cor_year <- function(year = 1983) {
require(dplyr, purrr)
if (year < 1950 | year > 2017) {
year <- sample(c(1950:2017), 1)
print("Non-valid year. Random year generated.")}
output <- purrr::keep(nba_0, is.numeric)
output <- dplyr::filter(output, Year == year)
cor(output)
}
cor_year(1983)
head(nba_0)
?colMeans
?cor
cor_year <- function(year = 1983) {
require(dplyr, purrr)
if (year < 1950 | year > 2017) {
year <- sample(c(1950:2017), 1)
print("Non-valid year. Random year generated.")}
output <- purrr::keep(nba_0, is.numeric)
output <- dplyr::filter(output, Year == year)
#  zero_cols <- output %>%
#    purr::split(housing$Neighborhood) %>%
#   map(colMeans, na.rm = TRUE)
cor(output, use = "complete.obs")
}
cor_year(1983)
cor_year <- function(year = 1983) {
require(dplyr, purrr)
if (year < 1950 | year > 2017) {
year <- sample(c(1950:2017), 1)
print("Non-valid year. Random year generated.")}
output <- purrr::keep(nba, is.numeric)
output <- dplyr::filter(output, Year == year)
#  zero_cols <- output %>%
#    purr::split(housing$Neighborhood) %>%
#   map(colMeans, na.rm = TRUE)
cor(output, use = "complete.obs", na.rm = TRUE)
}
cor_year(1983)
cor_year <- function(year = 1983) {
require(dplyr, purrr)
if (year < 1950 | year > 2017) {
year <- sample(c(1950:2017), 1)
print("Non-valid year. Random year generated.")}
output <- purrr::keep(nba, is.numeric)
output <- dplyr::filter(output, Year == year)
#  zero_cols <- output %>%
#    purr::split(housing$Neighborhood) %>%
#   map(colMeans, na.rm = TRUE)
cor(output, use = "complete.obs")
}
cor_year(1983)
cor_year <- function(year = 1983) {
require(dplyr, purrr)
if (year < 1950 | year > 2017) {
year <- sample(c(1950:2017), 1)
print("Non-valid year. Random year generated.")}
output <- dplyr::filter(output, Year == year)
output <- dplyr::select(output, -Year)
output <- purrr::keep(nba, is.numeric)
#  zero_cols <- output %>%
#    purr::split(housing$Neighborhood) %>%
#   map(colMeans, na.rm = TRUE)
cor(output, use = "complete.obs")
}
cor_year(1983)
cor_year <- function(year = 1983) {
require(dplyr, purrr)
if (year < 1950 | year > 2017) {
year <- sample(c(1950:2017), 1)
print("Non-valid year. Random year generated.")}
output <- dplyr::filter(nba, Year == year)
output <- dplyr::select(output, -Year)
output <- purrr::keep(output, is.numeric)
#  zero_cols <- output %>%
#    purr::split(housing$Neighborhood) %>%
#   map(colMeans, na.rm = TRUE)
cor(output, use = "complete.obs")
}
cor_year(1983)
cor_year(2000)
library(corrplot)
install.packages("corrgram")
library(corrgram)
?corrgram
installed.packages()
cor_year <- function(year = 1983) {
require(dplyr, purrr)
if (year < 1950 | year > 2017) {
year <- sample(c(1950:2017), 1)
print("Non-valid year. Random year generated.")}
output <- dplyr::filter(nba, Year == year)
output <- dplyr::select(output, -Year) # Manually removed since it's numeric
output <- purrr::keep(output, is.numeric)
if ("corrgram" %in% rownames(installed.packages()) {
require(corrgram)
corrgram(output)
} else {
cor(output, use = "complete.obs")
}
}
cor_year <- function(year = 1983) {
require(dplyr, purrr)
if (year < 1950 | year > 2017) {
year <- sample(c(1950:2017), 1)
print("Non-valid year. Random year generated.")}
output <- dplyr::filter(nba, Year == year)
output <- dplyr::select(output, -Year) # Manually removed since it's numeric
output <- purrr::keep(output, is.numeric)
if ("corrgram" %in% rownames(installed.packages()) == TRUE) {
require(corrgram)
corrgram(output)
} else { cor(output, use = "complete.obs") }
}
cor_year(1983)
cor_year <- function(year = 1983) {
require(dplyr, purrr)
if (year < 1950 | year > 2017) {
year <- sample(c(1950:2017), 1)
print("Non-valid year. Random year generated.")}
output <- dplyr::filter(nba, Year == year)
output <- dplyr::select(output, -Year) # Manually removed since it's numeric
output <- purrr::keep(output, is.numeric)
if ("corrgram" %in% rownames(installed.packages()) == TRUE) {
require(corrgram)
corrgram(output,
main = paste("Correlation of NBA Stats in ", as.character(year)))
} else { cor(output, use = "complete.obs") }
}
cor_year(1983)
head(nba)
library(devtools)
create_package("nba_stats_MDS")
create_packages(nbaStatsMDS)
create_packages(nbaStatsMDS)
create_package(nbaStatsMDS)
create_package("nbaStatsMDS")
?caret
?filter
??roxygen2
cor_year <- function(year = 1983) {
require(dplyr, purrr)
if (year < 1950 | year > 2017) {
year <- sample(c(1950:2017), 1)
print("Non-valid year. Random year generated.")}
output <- dplyr::filter(nba, Year == year)
output <- dplyr::select(output, -Year) # Manually removed since it's numeric
output <- purrr::keep(output, is.numeric)
if ("corrgram" %in% rownames(installed.packages()) == TRUE && corrgram == TRUE) {
require(corrgram)
corrgram::corrgram(output,
main = paste("Correlation of NBA Stats in", as.character(year)))
} else {cor(output, use = "complete.obs")}
}
cor_year(1983)
cor_year(1984)
cor_year <- function(year = 1983, corrgram = FALSE) {
require(dplyr, purrr)
if (year < 1950 | year > 2017) {
year <- sample(c(1950:2017), 1)
print("Non-valid year. Random year generated.")}
output <- dplyr::filter(nba, Year == year)
output <- dplyr::select(output, -Year) # Manually removed since it's numeric
output <- purrr::keep(output, is.numeric)
if ("corrgram" %in% rownames(installed.packages()) == TRUE && corrgram == TRUE) {
require(corrgram)
corrgram::corrgram(output,
main = paste("Correlation of NBA Stats in", as.character(year)))
} else {cor(output, use = "complete.obs")}
}
cor_year(1984)
cor_year(1984, corrgram = TRUE)
setwd("C:/Users/Slushmier/OneDrive/QMSS/GR5072_Modern_Data_Structures/Homework/05_Assignment/nbaStatsMDS")
dir.create("data/")
setwd("./data")
getwd()
save(nba, "nba.RData")
??Rdata
?save
save(nba, "nba.RData")
save(nba, ".RData")
?saveRDS
head(nba)
save(nba, "nba.RData")
save(nba, file = "nba.RData")
??use_data
use_data(nba, internal = FALSE)
